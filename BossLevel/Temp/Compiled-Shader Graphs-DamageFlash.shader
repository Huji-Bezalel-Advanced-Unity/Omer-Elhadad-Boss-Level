// Compiled shader for Windows, Mac, Linux

//////////////////////////////////////////////////////////////////////////
// 
// NOTE: This is *not* a valid shader file, the contents are provided just
// for information and for debugging purposes only.
// 
//////////////////////////////////////////////////////////////////////////
// Skipping shader variants that would not be included into build of current scene.

Shader "Shader Graphs/DamageFlash" {
Properties {
[NoScaleOffset]  _MainTex ("MainTex", 2D) = "white" { }
 _FlashColor ("FlashColor", Color) = (1.000000,1.000000,1.000000,0.000000)
 _FlashAmount ("FlashAmount", Range(0.000000,1.000000)) = 1.000000
[HideInInspector] [NoScaleOffset]  unity_Lightmaps ("unity_Lightmaps", 2DArray) = "" { }
[HideInInspector] [NoScaleOffset]  unity_LightmapsInd ("unity_LightmapsInd", 2DArray) = "" { }
[HideInInspector] [NoScaleOffset]  unity_ShadowMasks ("unity_ShadowMasks", 2DArray) = "" { }
}
SubShader { 
 Tags { "QUEUE"="Transparent" "RenderType"="Transparent" "RenderPipeline"="UniversalPipeline" "UniversalMaterialType"="Unlit" "ShaderGraphShader"="true" "ShaderGraphTargetId"="UniversalSpriteUnlitSubTarget" }


 // Stats for Vertex shader:
 //        d3d11: 11 math
 // Stats for Fragment shader:
 //        d3d11: 30 avg math (1..59), 18 avg branch (0..36)
 Pass {
  Name "Sprite Unlit"
  Tags { "LIGHTMODE"="Universal2D" "QUEUE"="Transparent" "RenderType"="Transparent" "RenderPipeline"="UniversalPipeline" "UniversalMaterialType"="Unlit" "ShaderGraphShader"="true" "ShaderGraphTargetId"="UniversalSpriteUnlitSubTarget" }
  ZWrite Off
  Cull Off
  Blend SrcAlpha OneMinusSrcAlpha, One OneMinusSrcAlpha
  //////////////////////////////////
  //                              //
  //      Compiled programs       //
  //                              //
  //////////////////////////////////
//////////////////////////////////////////////////////
Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "d3d11":
// Stats: 11 math, 2 temp registers
Uses vertex data channel "Vertex"
Uses vertex data channel "TexCoord0"
Uses vertex data channel "Color"

Constant Buffer "$Globals" (2096 bytes) on slot 0 {
  Matrix4x4 unity_MatrixVP at 1248
  Vector4 _RendererColor at 2080
}
Constant Buffer "UnityPerDraw" (720 bytes) on slot 1 {
  Matrix4x4 unity_ObjectToWorld at 0
  Vector4 unity_SpriteColor at 688
  Vector4 unity_SpriteProps at 704
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyz         0     NONE   float   xyz 
// NORMAL                   0   xyz         1     NONE   float       
// TANGENT                  0   xyzw        2     NONE   float       
// TEXCOORD                 0   xyzw        3     NONE   float   xyzw
// COLOR                    0   xyzw        4     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// INTERP                   0   xyzw        1     NONE   float   xyzw
// INTERP                   1   xyzw        2     NONE   float   xyzw
// INTERP                   2   xyz         3     NONE   float   xyz 
//
      vs_4_0
      dcl_constantbuffer CB0[131], immediateIndexed
      dcl_constantbuffer CB1[45], immediateIndexed
      dcl_input v0.xyz
      dcl_input v3.xyzw
      dcl_input v4.xyzw
      dcl_output_siv o0.xyzw, position
      dcl_output o1.xyzw
      dcl_output o2.xyzw
      dcl_output o3.xyz
      dcl_temps 2
   0: mul r0.xy, v0.xyxx, cb1[44].xyxx
   1: mul r0.yzw, r0.yyyy, cb1[1].xxyz
   2: mad r0.xyz, cb1[0].xyzx, r0.xxxx, r0.yzwy
   3: mad r0.xyz, cb1[2].xyzx, v0.zzzz, r0.xyzx
   4: add r0.xyz, r0.xyzx, cb1[3].xyzx
   5: mul r1.xyzw, r0.yyyy, cb0[79].xyzw
   6: mad r1.xyzw, cb0[78].xyzw, r0.xxxx, r1.xyzw
   7: mad r1.xyzw, cb0[80].xyzw, r0.zzzz, r1.xyzw
   8: mov o3.xyz, r0.xyzx
   9: add o0.xyzw, r1.xyzw, cb0[81].xyzw
  10: mov o1.xyzw, v3.xyzw
  11: mul r0.xyzw, cb0[130].xyzw, cb1[43].xyzw
  12: mul o2.xyzw, r0.xyzw, v4.xyzw
  13: ret 
// Approximately 0 instruction slots used


-- Hardware tier variant: Tier 1
-- Fragment shader for "d3d11":
// Stats: 1 math
Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// INTERP                   0   xyzw        1     NONE   float       
// INTERP                   1   xyzw        2     NONE   float   xyzw
// INTERP                   2   xyz         3     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
      ps_4_0
      dcl_input_ps linear v2.xyzw
      dcl_output o0.xyzw
   0: mul o0.xyzw, v2.xyzw, l(0.214041, 0.214041, 0.214041, 1.000000)
   1: ret 
// Approximately 0 instruction slots used


//////////////////////////////////////////////////////
Keywords: DEBUG_DISPLAY
-- Vertex shader for "d3d11":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "d3d11":
// Stats: 59 math, 6 temp registers, 36 branches
Constant Buffer "$Globals" (2288 bytes) on slot 0 {
  ScalarInt _DebugMaterialMode at 2064
  ScalarInt _DebugMaterialValidationMode at 2072
  ScalarInt _DebugSceneOverrideMode at 2080
  ScalarInt _DebugMipInfoMode at 2084
  ScalarInt _DebugMipMapStatusMode at 2088
  Float _DebugMipMapOpacity at 2096
  ScalarInt _DebugLightingMode at 2112
  Float _DebugValidateAlbedoMinLuminance at 2120
  Float _DebugValidateAlbedoMaxLuminance at 2124
  Float _DebugValidateAlbedoSaturationTolerance at 2128
  Float _DebugValidateAlbedoHueTolerance at 2132
  Vector3 _DebugValidateAlbedoCompareColor at 2144
  Vector4 _DebugColor at 2176
  Vector4 _DebugColorInvalidMode at 2192
  Vector4 _DebugValidateBelowMinThresholdColor at 2208
  Vector4 _DebugValidateAboveMaxThresholdColor at 2224
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xy  
// INTERP                   0   xyzw        1     NONE   float       
// INTERP                   1   xyzw        2     NONE   float   xyzw
// INTERP                   2   xyz         3     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
      ps_4_0
      dcl_constantbuffer CB0[140], immediateIndexed
      dcl_input_ps_siv linear noperspective v0.xy, position
      dcl_input_ps linear v2.xyzw
      dcl_output o0.xyzw
      dcl_temps 6
   0: switch cb0[129].x
   1:   case l(0)
   2:   mov r0.xyzw, l(0,0,0,0)
   3:   mov r1.x, l(0)
   4:   break 
   5:   case l(1)
   6:   mov r0.xyzw, l(0.214041,0.214041,0.214041,1.000000)
   7:   mov r1.x, l(-1)
   8:   break 
   9:   case l(3)
  10:   mov r0.xyzw, l(1.000000,1.000000,1.000000,1.000000)
  11:   mov r1.x, l(-1)
  12:   break 
  13:   case l(11)
  14:   mov r0.xyzw, l(1.000000,1.000000,1.000000,1.000000)
  15:   mov r1.x, l(-1)
  16:   break 
  17:   case l(8)
  18:   case l(7)
  19:   mov r0.xyzw, l(0,0,1.000000,1.000000)
  20:   mov r1.x, l(-1)
  21:   break 
  22:   default 
  23:   mov r0.xyzw, cb0[137].xyzw
  24:   mov r1.x, l(-1)
  25:   break 
  26: endswitch 
  27: mov o0.xyzw, r0.xyzw
  28: if_nz r1.x
  29:   ine r0.x, cb0[129].x, l(11)
  30: else 
  31:   movc r1.xyzw, cb0[130].xxxx, cb0[136].xyzw, l(0,0,0,0)
  32:   if_nz cb0[130].x
  33:     mov r0.y, l(-1)
  34:   else 
  35:     switch cb0[130].y
  36:       case l(0)
  37:       mov r0.y, l(0)
  38:       break 
  39:       case l(5)
  40:       ftou r0.zw, v0.xxxy
  41:       iadd r0.z, r0.w, r0.z
  42:       and r0.z, r0.z, l(15)
  43:       ult r0.z, r0.z, l(3)
  44:       movc r1.xyzw, r0.zzzz, l(0.900000,0.900000,0.900000,1.000000), l(0.716000,0.066000,0.900000,1.000000)
  45:       mov r0.y, l(-1)
  46:       break 
  47:       case l(6)
  48:       mov r1.xyzw, l(0.049000,0.320000,0.751000,1.000000)
  49:       mov r0.y, l(-1)
  50:       break 
  51:       case l(1)
  52:       mov r1.xyzw, l(0,0.007000,0.731000,1.000000)
  53:       mov r0.y, l(-1)
  54:       break 
  55:       case l(2)
  56:       ieq r0.z, cb0[130].z, l(1)
  57:       movc r1.xyzw, r0.zzzz, l(0.349000,0.782000,0.965000,1.000000), l(0.982000,0.320000,0,1.000000)
  58:       mov r0.y, l(-1)
  59:       break 
  60:       case l(4)
  61:       mov r1.xyzw, l(0,0.007000,0.731000,1.000000)
  62:       mov r0.y, l(-1)
  63:       break 
  64:       case l(3)
  65:       mov r1.xyzw, l(0,0.007000,0.731000,1.000000)
  66:       mov r0.y, l(-1)
  67:       break 
  68:       default 
  69:       mov r1.xyzw, cb0[137].xyzw
  70:       mov r0.y, l(-1)
  71:       break 
  72:     endswitch 
  73:     add r2.xyzw, r1.xyzw, l(-0.214041, -0.214041, -0.214041, -1.000000)
  74:     mad r2.xyzw, cb0[131].xxxx, r2.xyzw, l(0.214041, 0.214041, 0.214041, 1.000000)
  75:     movc r1.xyzw, r0.yyyy, r2.xyzw, r1.xyzw
  76:   endif 
  77:   if_nz r0.y
  78:     mov o0.xyzw, r1.xyzw
  79:     mov r0.x, l(-1)
  80:   else 
  81:     switch cb0[132].x
  82:       case l(0)
  83:       mov r2.xyw, l(0.214041,0.214041,0,0.214041)
  84:       mov r0.y, l(0)
  85:       break 
  86:       case l(2)
  87:       case l(3)
  88:       mov r2.xyw, l(1.000000,1.000000,0,1.000000)
  89:       mov r0.y, l(0)
  90:       break 
  91:       default 
  92:       mov r1.xyzw, cb0[137].xyzw
  93:       mov r2.xyw, l(0.214041,0.214041,0,0.214041)
  94:       mov r0.y, l(-1)
  95:       break 
  96:     endswitch 
  97:     if_nz r0.y
  98:       mov o0.xyzw, r1.xyzw
  99:       mov r0.x, l(-1)
 100:     else 
 101:       switch cb0[129].z
 102:         case l(0)
 103:         mov r0.x, l(0)
 104:         break 
 105:         case l(1)
 106:         dp3 r3.x, r2.wxyw, l(0.212673, 0.715152, 0.072175, 0.000000)
 107:         lt r0.y, r3.x, cb0[132].z
 108:         if_nz r0.y
 109:           mov r1.xyzw, cb0[138].xyzw
 110:         else 
 111:           lt r0.y, cb0[132].w, r3.x
 112:           ge r0.z, r2.x, r2.y
 113:           and r0.z, r0.z, l(0x3f800000)
 114:           mov r4.xy, r2.yxyy
 115:           mov r4.zw, l(0,0,-1.000000,0.666667)
 116:           add r5.xy, r2.xyxx, -r4.xyxx
 117:           mov r5.zw, l(0,0,1.000000,-1.000000)
 118:           mad r4.xyzw, r0.zzzz, r5.xyzw, r4.xyzw
 119:           ge r0.z, r2.w, r4.x
 120:           and r0.z, r0.z, l(0x3f800000)
 121:           mov r2.xyz, r4.xywx
 122:           mov r4.xyw, r2.wywx
 123:           add r4.xyzw, -r2.xyzw, r4.xyzw
 124:           mad r2.xyzw, r0.zzzz, r4.xyzw, r2.xyzw
 125:           min r0.z, r2.y, r2.w
 126:           add r0.z, -r0.z, r2.x
 127:           add r0.w, -r2.y, r2.w
 128:           mad r2.y, r0.z, l(6.000000), l(0.000100)
 129:           div r0.w, r0.w, r2.y
 130:           add r0.w, r0.w, r2.z
 131:           add r2.x, r2.x, l(0.000100)
 132:           div r0.z, r0.z, r2.x
 133:           ge r2.x, cb0[134].y, cb0[134].z
 134:           and r2.x, r2.x, l(0x3f800000)
 135:           mov r4.xy, cb0[134].zyzz
 136:           mov r4.zw, l(0,0,-1.000000,0.666667)
 137:           mov r5.xy, cb0[134].yzyy
 138:           mov r5.zw, l(0,0,0,-0.333333)
 139:           add r5.xyzw, -r4.xyzw, r5.xyzw
 140:           mad r2.xyzw, r2.xxxx, r5.xyzw, r4.xyzw
 141:           ge r3.z, cb0[134].x, r2.x
 142:           and r3.z, r3.z, l(0x3f800000)
 143:           mov r4.xyz, r2.xywx
 144:           mov r4.w, cb0[134].x
 145:           mov r2.xyw, r4.wywx
 146:           add r2.xyzw, -r4.xyzw, r2.xyzw
 147:           mad r2.xyzw, r3.zzzz, r2.xyzw, r4.xyzw
 148:           min r3.z, r2.y, r2.w
 149:           add r3.z, r2.x, -r3.z
 150:           add r2.y, -r2.y, r2.w
 151:           mad r2.w, r3.z, l(6.000000), l(0.000100)
 152:           div r2.y, r2.y, r2.w
 153:           add r2.y, r2.y, r2.z
 154:           add r2.x, r2.x, l(0.000100)
 155:           div r2.x, r3.z, r2.x
 156:           add r2.z, r2.x, -cb0[133].x
 157:           lt r2.z, r0.z, r2.z
 158:           add r2.w, |r2.y|, -cb0[133].y
 159:           lt r3.z, |r0.w|, r2.w
 160:           add r2.w, r2.w, l(1.000000)
 161:           lt r2.w, |r0.w|, r2.w
 162:           and r2.w, r2.w, r3.z
 163:           or r2.z, r2.w, r2.z
 164:           add r2.x, r2.x, cb0[133].x
 165:           lt r0.z, r2.x, r0.z
 166:           add r2.x, |r2.y|, cb0[133].y
 167:           lt r2.y, r2.x, |r0.w|
 168:           add r2.x, r2.x, l(-1.000000)
 169:           lt r0.w, r2.x, |r0.w|
 170:           and r0.w, r0.w, r2.y
 171:           or r0.z, r0.w, r0.z
 172:           mov r3.y, l(1.000000)
 173:           movc r3.xyzw, r0.zzzz, cb0[139].xyzw, r3.xxxy
 174:           movc r2.xyzw, r2.zzzz, cb0[138].xyzw, r3.xyzw
 175:           movc r1.xyzw, r0.yyyy, cb0[139].xyzw, r2.xyzw
 176:         endif 
 177:         mov r0.x, l(-1)
 178:         break 
 179:         default 
 180:         mov r1.xyzw, cb0[137].xyzw
 181:         mov r0.x, l(-1)
 182:         break 
 183:       endswitch 
 184:       mov o0.xyzw, r1.xyzw
 185:     endif 
 186:   endif 
 187: endif 
 188: if_nz r0.x
 189:   ret 
 190: endif 
 191: mul o0.xyzw, v2.xyzw, l(0.214041, 0.214041, 0.214041, 1.000000)
 192: ret 
// Approximately 0 instruction slots used


 }


 // Stats for Vertex shader:
 //        d3d11: 11 math
 // Stats for Fragment shader:
 //        d3d11: 30 avg math (1..59), 18 avg branch (0..36)
 Pass {
  Name "Sprite Unlit"
  Tags { "LIGHTMODE"="UniversalForward" "QUEUE"="Transparent" "RenderType"="Transparent" "RenderPipeline"="UniversalPipeline" "UniversalMaterialType"="Unlit" "ShaderGraphShader"="true" "ShaderGraphTargetId"="UniversalSpriteUnlitSubTarget" }
  ZWrite Off
  Cull Off
  Blend SrcAlpha OneMinusSrcAlpha, One OneMinusSrcAlpha
  //////////////////////////////////
  //                              //
  //      Compiled programs       //
  //                              //
  //////////////////////////////////
//////////////////////////////////////////////////////
Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "d3d11":
// Stats: 11 math, 2 temp registers
Uses vertex data channel "Vertex"
Uses vertex data channel "TexCoord0"
Uses vertex data channel "Color"

Constant Buffer "$Globals" (2096 bytes) on slot 0 {
  Matrix4x4 unity_MatrixVP at 1248
  Vector4 _RendererColor at 2080
}
Constant Buffer "UnityPerDraw" (720 bytes) on slot 1 {
  Matrix4x4 unity_ObjectToWorld at 0
  Vector4 unity_SpriteColor at 688
  Vector4 unity_SpriteProps at 704
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyz         0     NONE   float   xyz 
// NORMAL                   0   xyz         1     NONE   float       
// TANGENT                  0   xyzw        2     NONE   float       
// TEXCOORD                 0   xyzw        3     NONE   float   xyzw
// COLOR                    0   xyzw        4     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// INTERP                   0   xyzw        1     NONE   float   xyzw
// INTERP                   1   xyzw        2     NONE   float   xyzw
// INTERP                   2   xyz         3     NONE   float   xyz 
//
      vs_4_0
      dcl_constantbuffer CB0[131], immediateIndexed
      dcl_constantbuffer CB1[45], immediateIndexed
      dcl_input v0.xyz
      dcl_input v3.xyzw
      dcl_input v4.xyzw
      dcl_output_siv o0.xyzw, position
      dcl_output o1.xyzw
      dcl_output o2.xyzw
      dcl_output o3.xyz
      dcl_temps 2
   0: mul r0.xy, v0.xyxx, cb1[44].xyxx
   1: mul r0.yzw, r0.yyyy, cb1[1].xxyz
   2: mad r0.xyz, cb1[0].xyzx, r0.xxxx, r0.yzwy
   3: mad r0.xyz, cb1[2].xyzx, v0.zzzz, r0.xyzx
   4: add r0.xyz, r0.xyzx, cb1[3].xyzx
   5: mul r1.xyzw, r0.yyyy, cb0[79].xyzw
   6: mad r1.xyzw, cb0[78].xyzw, r0.xxxx, r1.xyzw
   7: mad r1.xyzw, cb0[80].xyzw, r0.zzzz, r1.xyzw
   8: mov o3.xyz, r0.xyzx
   9: add o0.xyzw, r1.xyzw, cb0[81].xyzw
  10: mov o1.xyzw, v3.xyzw
  11: mul r0.xyzw, cb0[130].xyzw, cb1[43].xyzw
  12: mul o2.xyzw, r0.xyzw, v4.xyzw
  13: ret 
// Approximately 0 instruction slots used


-- Hardware tier variant: Tier 1
-- Fragment shader for "d3d11":
// Stats: 1 math
Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// INTERP                   0   xyzw        1     NONE   float       
// INTERP                   1   xyzw        2     NONE   float   xyzw
// INTERP                   2   xyz         3     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
      ps_4_0
      dcl_input_ps linear v2.xyzw
      dcl_output o0.xyzw
   0: mul o0.xyzw, v2.xyzw, l(0.214041, 0.214041, 0.214041, 1.000000)
   1: ret 
// Approximately 0 instruction slots used


//////////////////////////////////////////////////////
Keywords: DEBUG_DISPLAY
-- Vertex shader for "d3d11":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "d3d11":
// Stats: 59 math, 6 temp registers, 36 branches
Constant Buffer "$Globals" (2288 bytes) on slot 0 {
  ScalarInt _DebugMaterialMode at 2064
  ScalarInt _DebugMaterialValidationMode at 2072
  ScalarInt _DebugSceneOverrideMode at 2080
  ScalarInt _DebugMipInfoMode at 2084
  ScalarInt _DebugMipMapStatusMode at 2088
  Float _DebugMipMapOpacity at 2096
  ScalarInt _DebugLightingMode at 2112
  Float _DebugValidateAlbedoMinLuminance at 2120
  Float _DebugValidateAlbedoMaxLuminance at 2124
  Float _DebugValidateAlbedoSaturationTolerance at 2128
  Float _DebugValidateAlbedoHueTolerance at 2132
  Vector3 _DebugValidateAlbedoCompareColor at 2144
  Vector4 _DebugColor at 2176
  Vector4 _DebugColorInvalidMode at 2192
  Vector4 _DebugValidateBelowMinThresholdColor at 2208
  Vector4 _DebugValidateAboveMaxThresholdColor at 2224
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xy  
// INTERP                   0   xyzw        1     NONE   float       
// INTERP                   1   xyzw        2     NONE   float   xyzw
// INTERP                   2   xyz         3     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
      ps_4_0
      dcl_constantbuffer CB0[140], immediateIndexed
      dcl_input_ps_siv linear noperspective v0.xy, position
      dcl_input_ps linear v2.xyzw
      dcl_output o0.xyzw
      dcl_temps 6
   0: switch cb0[129].x
   1:   case l(0)
   2:   mov r0.xyzw, l(0,0,0,0)
   3:   mov r1.x, l(0)
   4:   break 
   5:   case l(1)
   6:   mov r0.xyzw, l(0.214041,0.214041,0.214041,1.000000)
   7:   mov r1.x, l(-1)
   8:   break 
   9:   case l(3)
  10:   mov r0.xyzw, l(1.000000,1.000000,1.000000,1.000000)
  11:   mov r1.x, l(-1)
  12:   break 
  13:   case l(11)
  14:   mov r0.xyzw, l(1.000000,1.000000,1.000000,1.000000)
  15:   mov r1.x, l(-1)
  16:   break 
  17:   case l(8)
  18:   case l(7)
  19:   mov r0.xyzw, l(0,0,1.000000,1.000000)
  20:   mov r1.x, l(-1)
  21:   break 
  22:   default 
  23:   mov r0.xyzw, cb0[137].xyzw
  24:   mov r1.x, l(-1)
  25:   break 
  26: endswitch 
  27: mov o0.xyzw, r0.xyzw
  28: if_nz r1.x
  29:   ine r0.x, cb0[129].x, l(11)
  30: else 
  31:   movc r1.xyzw, cb0[130].xxxx, cb0[136].xyzw, l(0,0,0,0)
  32:   if_nz cb0[130].x
  33:     mov r0.y, l(-1)
  34:   else 
  35:     switch cb0[130].y
  36:       case l(0)
  37:       mov r0.y, l(0)
  38:       break 
  39:       case l(5)
  40:       ftou r0.zw, v0.xxxy
  41:       iadd r0.z, r0.w, r0.z
  42:       and r0.z, r0.z, l(15)
  43:       ult r0.z, r0.z, l(3)
  44:       movc r1.xyzw, r0.zzzz, l(0.900000,0.900000,0.900000,1.000000), l(0.716000,0.066000,0.900000,1.000000)
  45:       mov r0.y, l(-1)
  46:       break 
  47:       case l(6)
  48:       mov r1.xyzw, l(0.049000,0.320000,0.751000,1.000000)
  49:       mov r0.y, l(-1)
  50:       break 
  51:       case l(1)
  52:       mov r1.xyzw, l(0,0.007000,0.731000,1.000000)
  53:       mov r0.y, l(-1)
  54:       break 
  55:       case l(2)
  56:       ieq r0.z, cb0[130].z, l(1)
  57:       movc r1.xyzw, r0.zzzz, l(0.349000,0.782000,0.965000,1.000000), l(0.982000,0.320000,0,1.000000)
  58:       mov r0.y, l(-1)
  59:       break 
  60:       case l(4)
  61:       mov r1.xyzw, l(0,0.007000,0.731000,1.000000)
  62:       mov r0.y, l(-1)
  63:       break 
  64:       case l(3)
  65:       mov r1.xyzw, l(0,0.007000,0.731000,1.000000)
  66:       mov r0.y, l(-1)
  67:       break 
  68:       default 
  69:       mov r1.xyzw, cb0[137].xyzw
  70:       mov r0.y, l(-1)
  71:       break 
  72:     endswitch 
  73:     add r2.xyzw, r1.xyzw, l(-0.214041, -0.214041, -0.214041, -1.000000)
  74:     mad r2.xyzw, cb0[131].xxxx, r2.xyzw, l(0.214041, 0.214041, 0.214041, 1.000000)
  75:     movc r1.xyzw, r0.yyyy, r2.xyzw, r1.xyzw
  76:   endif 
  77:   if_nz r0.y
  78:     mov o0.xyzw, r1.xyzw
  79:     mov r0.x, l(-1)
  80:   else 
  81:     switch cb0[132].x
  82:       case l(0)
  83:       mov r2.xyw, l(0.214041,0.214041,0,0.214041)
  84:       mov r0.y, l(0)
  85:       break 
  86:       case l(2)
  87:       case l(3)
  88:       mov r2.xyw, l(1.000000,1.000000,0,1.000000)
  89:       mov r0.y, l(0)
  90:       break 
  91:       default 
  92:       mov r1.xyzw, cb0[137].xyzw
  93:       mov r2.xyw, l(0.214041,0.214041,0,0.214041)
  94:       mov r0.y, l(-1)
  95:       break 
  96:     endswitch 
  97:     if_nz r0.y
  98:       mov o0.xyzw, r1.xyzw
  99:       mov r0.x, l(-1)
 100:     else 
 101:       switch cb0[129].z
 102:         case l(0)
 103:         mov r0.x, l(0)
 104:         break 
 105:         case l(1)
 106:         dp3 r3.x, r2.wxyw, l(0.212673, 0.715152, 0.072175, 0.000000)
 107:         lt r0.y, r3.x, cb0[132].z
 108:         if_nz r0.y
 109:           mov r1.xyzw, cb0[138].xyzw
 110:         else 
 111:           lt r0.y, cb0[132].w, r3.x
 112:           ge r0.z, r2.x, r2.y
 113:           and r0.z, r0.z, l(0x3f800000)
 114:           mov r4.xy, r2.yxyy
 115:           mov r4.zw, l(0,0,-1.000000,0.666667)
 116:           add r5.xy, r2.xyxx, -r4.xyxx
 117:           mov r5.zw, l(0,0,1.000000,-1.000000)
 118:           mad r4.xyzw, r0.zzzz, r5.xyzw, r4.xyzw
 119:           ge r0.z, r2.w, r4.x
 120:           and r0.z, r0.z, l(0x3f800000)
 121:           mov r2.xyz, r4.xywx
 122:           mov r4.xyw, r2.wywx
 123:           add r4.xyzw, -r2.xyzw, r4.xyzw
 124:           mad r2.xyzw, r0.zzzz, r4.xyzw, r2.xyzw
 125:           min r0.z, r2.y, r2.w
 126:           add r0.z, -r0.z, r2.x
 127:           add r0.w, -r2.y, r2.w
 128:           mad r2.y, r0.z, l(6.000000), l(0.000100)
 129:           div r0.w, r0.w, r2.y
 130:           add r0.w, r0.w, r2.z
 131:           add r2.x, r2.x, l(0.000100)
 132:           div r0.z, r0.z, r2.x
 133:           ge r2.x, cb0[134].y, cb0[134].z
 134:           and r2.x, r2.x, l(0x3f800000)
 135:           mov r4.xy, cb0[134].zyzz
 136:           mov r4.zw, l(0,0,-1.000000,0.666667)
 137:           mov r5.xy, cb0[134].yzyy
 138:           mov r5.zw, l(0,0,0,-0.333333)
 139:           add r5.xyzw, -r4.xyzw, r5.xyzw
 140:           mad r2.xyzw, r2.xxxx, r5.xyzw, r4.xyzw
 141:           ge r3.z, cb0[134].x, r2.x
 142:           and r3.z, r3.z, l(0x3f800000)
 143:           mov r4.xyz, r2.xywx
 144:           mov r4.w, cb0[134].x
 145:           mov r2.xyw, r4.wywx
 146:           add r2.xyzw, -r4.xyzw, r2.xyzw
 147:           mad r2.xyzw, r3.zzzz, r2.xyzw, r4.xyzw
 148:           min r3.z, r2.y, r2.w
 149:           add r3.z, r2.x, -r3.z
 150:           add r2.y, -r2.y, r2.w
 151:           mad r2.w, r3.z, l(6.000000), l(0.000100)
 152:           div r2.y, r2.y, r2.w
 153:           add r2.y, r2.y, r2.z
 154:           add r2.x, r2.x, l(0.000100)
 155:           div r2.x, r3.z, r2.x
 156:           add r2.z, r2.x, -cb0[133].x
 157:           lt r2.z, r0.z, r2.z
 158:           add r2.w, |r2.y|, -cb0[133].y
 159:           lt r3.z, |r0.w|, r2.w
 160:           add r2.w, r2.w, l(1.000000)
 161:           lt r2.w, |r0.w|, r2.w
 162:           and r2.w, r2.w, r3.z
 163:           or r2.z, r2.w, r2.z
 164:           add r2.x, r2.x, cb0[133].x
 165:           lt r0.z, r2.x, r0.z
 166:           add r2.x, |r2.y|, cb0[133].y
 167:           lt r2.y, r2.x, |r0.w|
 168:           add r2.x, r2.x, l(-1.000000)
 169:           lt r0.w, r2.x, |r0.w|
 170:           and r0.w, r0.w, r2.y
 171:           or r0.z, r0.w, r0.z
 172:           mov r3.y, l(1.000000)
 173:           movc r3.xyzw, r0.zzzz, cb0[139].xyzw, r3.xxxy
 174:           movc r2.xyzw, r2.zzzz, cb0[138].xyzw, r3.xyzw
 175:           movc r1.xyzw, r0.yyyy, cb0[139].xyzw, r2.xyzw
 176:         endif 
 177:         mov r0.x, l(-1)
 178:         break 
 179:         default 
 180:         mov r1.xyzw, cb0[137].xyzw
 181:         mov r0.x, l(-1)
 182:         break 
 183:       endswitch 
 184:       mov o0.xyzw, r1.xyzw
 185:     endif 
 186:   endif 
 187: endif 
 188: if_nz r0.x
 189:   ret 
 190: endif 
 191: mul o0.xyzw, v2.xyzw, l(0.214041, 0.214041, 0.214041, 1.000000)
 192: ret 
// Approximately 0 instruction slots used


 }
}
CustomEditor "UnityEditor.ShaderGraph.GenericShaderGraphMaterialGUI"
Fallback "Hidden/Shader Graph/FallbackError"
}